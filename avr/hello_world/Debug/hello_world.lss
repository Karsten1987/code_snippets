
hello_world.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000005a  000000ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000b64  00000000  00000000  000000d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b60  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	10 c0       	rjmp	.+32     	; 0x56 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
// alle auf die beiden Schr√§gstriche folgenden
// Zeichen einer Zeile sind Kommentar

#include <avr/io.h>          // (1)

int main (void) {            // (2)
  38:	cf 93       	push	r28
  3a:	df 93       	push	r29
  3c:	cd b7       	in	r28, 0x3d	; 61
  3e:	de b7       	in	r29, 0x3e	; 62

   DDRB  = 0xFF;             // (3)
  40:	87 e3       	ldi	r24, 0x37	; 55
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	2f ef       	ldi	r18, 0xFF	; 255
  46:	fc 01       	movw	r30, r24
  48:	20 83       	st	Z, r18
   PORTB = 0x03;             // (4)
  4a:	88 e3       	ldi	r24, 0x38	; 56
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	23 e0       	ldi	r18, 0x03	; 3
  50:	fc 01       	movw	r30, r24
  52:	20 83       	st	Z, r18

   while(1) {                // (5)
     /* "leere" Schleife*/   // (6)
   }                         // (7)
  54:	ff cf       	rjmp	.-2      	; 0x54 <__SREG__+0x15>

00000056 <_exit>:
  56:	f8 94       	cli

00000058 <__stop_program>:
  58:	ff cf       	rjmp	.-2      	; 0x58 <__stop_program>
